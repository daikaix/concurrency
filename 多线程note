1. 环境初始化
登录Gitee, 选择仓库创建,仓库名称concurrency,初始化仓库 设置语言为Java,私有仓库,以READme进行初始化
获取到对应的项目地址：https://gitee.com/dai-kaixuan/concurrency

2. spring Initialize
配置 com.mmall.concurrency => war,java8
更改IDEA的Maven库为 1.6版本的
更改pom.xml => 配置版本为1.5.9RELEASE 以及更改groupId,artifactId,name,description
先获取git对应的模板，然后在把我们的放进去，再用IDEA打开

查找pom的Dependence：
首先，现将dependence放进pom文件中去。
寻找版本号：https://mvnrepository.com/search?q=shiro-core => 对应的artifact名即可
option+enter => Maven search => 获取需要的包

3. git使用
git init才行, 这是远程进入，才会进入git状态, 将learnJava初始化
如果是第一次，还需要配置用户名和密码，最好gitee和git配置的一样
git clone 是拉取数据

添加gitignore 设置忽略掉上传的git数据

然后在进行创作的时候会自动将数据放入！！！
在Git工具栏，可以看到Git Commit的不同之处以及需要commit的地方， 也可以将需要的数据直接拉下来
git add xxx
git status
git commit -am 'init'

还可以查看历史记录以及返回原版

git push进行提交

4. 删除并创建自己的初始化类,并添加一些需要的Annotation注解
删除自带的test和application方法，创建自己的application方法，然后运行即可

annotation包 => ThreadSafe注解
Target指定作用的类，ElementType.Type
Rentation设置对应的注解作用范围 RentationPolicy.SOURCE
定义一个属性值value => 默认值为""

5. 并发模拟
    1. Postman模拟并发
        （1）首先新增一个测试的controller,添加lombok,然后添加Slf4j注解 => 运行
        打开Postman, 发送请求，history可以查看历史记录
        右上方添加环境变量，localhost => 变量名称：host => http://localhost:8080/

        （2）并发测试： collection => 新增一个Concurrency
        Save => 将测试的请求保存到collection之中 => 右边一个小箭头，点击run
        然后配置请求次数和请求的延迟时间delay => 运行获取结果

    2. Apache AB压力测试工具
        ab -n 1000 -c 50 http://localhost:8080/test
        -n 请求数 -c 并发数
        结果： Total transferred：返回的数据总和
              HTML transferred: 返回的正文长度
              Requests per second: 吞吐率
    3. JMeter
        安装：brew install jmeter
        安装路径为：/usr/local/Cellar/jmeter/5.4.1/bin
        运行：jmeter
        配置界面显示：Options -> look and feel -> Metal
        Test Plan -> Thread Group -> Name,Number of users,持续时间,循环次数多次20次
        add -> sampler -> HTTP请求 配置端口
        add -> Listener -> graph result, view results tree 可以查看运行时的结果
        打开日志文件：Options -> log viewer

    4. 代码方式
        (1)CountDownLatch阻塞线程 -> T1,T2,T3都到达后再放行
        (2)Semaphore 信号量 -> 允许的并发数

        ExecutorService => Executors.newCachedThreadPool(); execute( Runnable，bda表达式不接受参数，直接获取参数需要是final类型)
        Semaphore => semaphore.acquire() .release()
        CountDownLatch => countDown(), await()等待 shutdown()
        lambda表达式 => 就是一个匿名的函数，进行需要的函数操作

6. 线程安全性
多个线程不管以何种方式访问某个类，并且在主调代码中不需要进行同步，都能表现正确的行为。

7. 非阻塞同步
先进行操作，如果未发生其他线程争用的情况就操作成功，否则重试，这种方案不需要阻塞
乐观的锁，但是不适合高强度竞争的情况
    1. Atomic包，原子性 AutomicInteger => number.getAndIncrement()
       源码：
       public final int getAndAddInt(Object var1, long var2, int var4) {
       int var5; do { var5 = this.getIntVolatile(var1, var2); }
       while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));
       return var5;
       }

    2. AtomicLong  .incrementAndGet() 竞争不高的情况使用，例如全局的序列号生成
       LongAdder  .increment()  竞争较高时使用，采取hash算法,将对单个变量的CAS操作分散为多个变量的CAS,但是可能有误差
       AtomicReference<Integer> ... 一个综合类，可以结合使用 compareAndSet
       AtomicIntegerFieldUpdater<AtomicExample5> 原子性去更新某个类的实例字段（必须以volatile修饰的非static字段）
            compareAndSet(example5,100,120)
       AtomicLongArray: 数组，选择性更新索引对应的值 => array.addAndGet()
       AtomicBoolean: 让某个程序只执行一次

    3. 原理:
       CAS：CompareAndSwap,比较并交换。
       CAS 指令需要有 3 个操作数，分别是 内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B。

    4. ABA问题：如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有 被改变过。
       AtomicStampedReference：带有标记（stamp的值），控制变量值的版本，解决ABA问题 1，2，3版本

8. 互斥同步
synchronized:（不可中断锁，适合竞争不激烈)
    1. 修饰代码块，void F() { synchronized(this){} } , 范围为{}内部
       它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。
    2. 修饰一个方法，synchronized void F(){}, 作用于同一个对象
       (继承该方法无synchronized效果，需要自己声明)
       注意：如果声明两个实例，分别使用运行，是不会有锁的效果的

    3. 修饰一个类，static void F() { synchronized(xxx.class){} }
    4. 修饰一个静态方法， synchronized static void F(){}
       作用在类上，分别使用运行，依然有锁的效果

    实例：向之前的计数方法，可以使用synchronized修饰静态的add方法，这样add操作就具有一致性了
    原理：在类上声明了一个变量，用来表明该实例|类对应的信号量，不可同时访问

Lock：可中断锁，多样化同步，竞争激烈维持常态
    1. ReentrantLock

9. 安全发布对象  （在对象构建之前不能发布对象，可变对象需要安全发布），结合互斥同步实现多线程安全发布对象
不安全发布：对象是不安全的，可以在外部被修改，
对象逃逸：内部类，在对象构造完毕之前就有属性值
    1. 在静态初始化函数中初始化一个对象引用 饿汉模式 static xx = new xx, static {}
    2. 引用保存到volatile类型域或者AtomicReference对象之中
    3. 保存在一个由锁保护的域中 Example5,Enum单例对象
    4. 保存在final类型域之中

10. 不可变对象
不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。
只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。
    不可变的类型：
    1. ﬁnal关键字修饰的基本数据类型, 修饰引用类型可以对内部的值进行修改
    2. String
    3. 枚举类型
    4. Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。
    5. unmodifiableXXX, ImmutableXXX 处理过的map或者set，不可以修改
       实现原理，将map对应的更新方法进行异常抛出，将普通的map变为不可修改的map
       ImmutableList.of() 多个数据进行初始化

11. 线程封闭
    1. 堆栈封闭：局部变量，无并发问题，在一个方法内部
    2. ThreadLocal 线程封闭：用map实现线程的封闭, 每个线程拥有一个自己的实例变量
       实例：声明一个filter，Interceptor, application之中定义实现Bean，先进行filter，然后对请求执行前后执行interceptor
            threadLocal创建一个线程封闭的变量, 调用其中的add，remove方法
       实例：数据库的jdbc的connection对象


12. 同步容器
    1. ArrayList -> Vector,Stack
       同步容器不一定线程安全：保证一个时间只有一个线程能够访问，但可能会出现数组越界异常。

    2. HashMap -> HashTable(key,value 不能为null)
       一个同步容器
    3. Collections.synchronizedList(Lists.newArrayList())
       Collections.synchronizedSet(new HashSet<>())
       Collections.synchronizedMap
    4. 使用迭代器遍历集合时，最好不要使用remove操作，最好先打上标记再删除。
       删除后会导致 mod值不同，报异常

13. 并发容器 J.U.C
    ArrayList
    1. CopyOnWriteArrayList => 先在复制的上面写数组，然后将数组指向复制的地方，然后将另一个数据重置为这个复制的数组
       写操作就会复制，且不能实时读，适合读多写少的场景；（读写分离，最终一致性，开辟空间）
    HashSet,TreeSet
    1. CopyOnWriteArraySet
    2. ConcurrentSkipListSet (自然排序) 并发进行插入删除具有原子性, 批量操作不保证原子性

    HashMap,TreeMap
    1. ConcurrentHashMap => 针对读的操作进行大量的优化
    2. ConcurrentSkipListMap => 跳表底层实现，可以支持更高的并发

14. AQS => AbstractQueuedSynchronizer
    本质：双向列表，队列 => Sync queue( 包括head节点和tail节点 ），Condition queue，单向链表
         使用Node实现FIFO队列，构建锁或者其他同步装置基础框架 int表示状态，1表示有锁，大于1表示锁的数量
         通过继承使用，实现acquire和release操作状态
         可以同时实现排它锁和共享锁

    线程在CLS队列之中，首先尝试获取锁，没有就封装起来放进Sync队列之中，循环尝试获取锁，

    1. CountDownLatch，阻塞进程await()，countDown计数器减一，然后同时释放
       实例：指定时间内完成的数量，在await()中指定等待的时间

    2. Semaphore,控制同一时间并发的数目
       acquire(),release()  拿多个许可，acquire(3)
       多出的请求直接丢弃tryAcquire(),可以获取多个许可，可以等待一段时间，
       semaphore.tryAcquire(2,1, TimeUnit.SECONDS)

    3. CyclicBarrier,循环屏障，阻塞进程，多个线程循环等待直到准备完成
       同步辅助类，进入等待状态，计数器加一，达到设置的初始值，线程会被唤醒
       await可以设置等待时间，但会抛出异常，需要使用try catch包裹
       声明时还可以指定一个lambda函数，在线程等待完毕后先执行该操作。

    4. ReentrantLock
       (1)可重入锁，synchronized也是可重入锁
       (2)锁的实现，基于代码实现，synchronized基于JVM实现
       (3)性能，差不多，synchronized使用了自旋锁和偏向锁
       功能，需要自己声明，
       不同点：(需要实现下面三个功能)
       (1)可以指定公平锁和非公平锁，
       (2)提供了Condition类，分组唤醒线程。
       (3)提供能够中断等待锁的线程的机制，lock.lockInterruptibly()

       Lock = new ReentrantLock()  lock(),unlock()
       lockInterruptibly()
       Condition的使用：reentrantLock.newCondition()
       condition.await() 是锁的释放
       condition.signalAll() 发送信号，表示线程2已经完成，线程1被放在队列之中

    5. ReentrantReadWriteLock: 没有读写锁的情况下才能取得写锁，实现多线程读取。
       悲观读取，认为一定会导致读操作的结果修改
       StampedLock: 乐观锁，认为写操作不会影响读操作
       long stamp = lock.writeLock() => lock.unlock(stamp)

    5. Condition

    6. FutureTask



14. Java内存模型
三大特性：原子性，

可见性：指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。
Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。
    1. synchronized:
    2. volatile: 通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。
       写操作：store指令刷新主内存， 读load指令读取共享变量

    实例：以volatile修饰count,依旧无法实现add()。
    应用场景，（1）作为一个标识量，判断是否可用, 当有一个操作需要等到一个东西加载完成之后才能执行。
             (2) 双重检测

有序性: 在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。
       在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。

    先行发生原则：
    1. 单一线程原则：在一个线程内，在程序前面的操作先行发生于后面的操作。
    2. 一个 unlock 操作先行发生于后面对同一个锁的 lock 操作
    3. volatile 变量规则，对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。
    4. ...

15. 常见线程不安全的类
    1. StringBuilder是线程不安全的，需要使用StringBuffer这个线程安全的类。
    应用字符串拼接时，StringBuffer添加了synchronized关键字，不考虑多线程使用StringBuilder即可.
    2. 日期转换，SimpleDateFormat("yyyyMMDD") 多线程是会抛出异常，解决方案是堆栈封闭，作为局部变量声明
    可以使用DateTimeFormatter,DataTime
    3. ArrayList,HashSet,HashMap线程不安全
       采用对应的同步容器和并发容器
    4. 先检查再执行这种方式：
        if(condition(a)) { handle(a); } => CAS是底层保证两个操作的原子性